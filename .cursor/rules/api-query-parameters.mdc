---
description:
globs:
alwaysApply: false
---
# API Query Parameters and Filtering

The Extension Data API supports advanced querying with filters, aggregation, grouping, and sorting. This document covers all available query parameters and their usage patterns.

## Core Query Parameters

### Required Parameters
- **`key`** (string): The data key to query for. Required for all queries.

### Optional Parameters
- **`filter`** (object): Filtering conditions
- **`aggregate`** (string/object): Aggregation type
- **`aggregate_filter`** (object): Filter on aggregation results
- **`group_by`** (string): Field to group results by
- **`order`** (string/object): Sorting options
- **`limit`** (integer): Maximum results (default: 50, max: 100)
- **`member_only`** (boolean): Only return current user's data

## Filter Parameters

### Basic Filters
```javascript
// Equal to
filter[eq]=25

// Greater than
filter[gt]=20

// Less than
filter[lt]=30

// Contains (string search)
filter[contains]=protein
```

### Date Filters
```javascript
// After date
filter[after]=2024-01-01

// Before date
filter[before]=2024-12-31
```

### Field-Specific Filters
```javascript
// Filter on specific field
filter[on]=value->>'protein'
filter[gt]=20
```

### Complex Filter Examples
```javascript
// Multiple conditions
{
  filter: {
    on: "value->>'protein'",
    gt: 20,
    after: "2024-01-01"
  }
}
```

## Aggregation Parameters

### Simple Aggregation
```javascript
// Sum all values
aggregate=sum

// Average all values
aggregate=avg

// Count records
aggregate=count

// Maximum value
aggregate=max

// Minimum value
aggregate=min
```

### Field-Specific Aggregation
```javascript
// Aggregate on specific field
aggregate[type]=sum
aggregate[on]=value->>'protein'
```

### Valid Aggregation Types
- `sum`: Sum of numeric values
- `avg`: Average of numeric values
- `max`: Maximum numeric value
- `min`: Minimum numeric value
- `count`: Count of records

## Group By Parameters

### Standard Grouping
```javascript
// Group by day
group_by=day

// Group by subscriber
group_by=subscriber_id

// Group by key
group_by=key

// Group by value
group_by=value
```

### JSON Path Grouping
```javascript
// Group by nested field
group_by=value->>'protein'
group_by=value->>'category'
```

### Groupable Fields
- `day`: Group by date (DATE(tracked_at))
- `subscriber_id`: Group by subscriber (includes member info)
- `key`: Group by data key
- `value`: Group by data value
- JSON paths: `value->>'field_name'`

## Order Parameters

### Simple Ordering
```javascript
// Ascending by value
order=ASC

// Descending by value
order=DESC
```

### Field-Specific Ordering
```javascript
// Order by creation date
order[by]=created_at
order[dir]=DESC

// Order by value
order[by]=value
order[dir]=ASC
```

### Valid Order Fields
- `created_at`: Order by tracked_at timestamp
- `value`: Order by data value

## Aggregate Filter Parameters

Filter on aggregation results:
```javascript
// Filter aggregated results
aggregate_filter[gt]=100
aggregate_filter[lt]=500
aggregate_filter[eq]=250
```

## Limit Parameter

```javascript
// Default limit (50)
limit=50

// Custom limit (max 100)
limit=25

// Maximum allowed
limit=100
```

## Member Only Parameter

```javascript
// Only current user's data
member_only=true

// All users' data (default)
member_only=false
```

## Complex Query Examples

### Advanced Filtering with Aggregation
```javascript
// Get average protein intake for days with carbs > 30
{
  key: 'nutrition',
  filter: {
    on: "value->>'carbs'",
    gt: 30
  },
  aggregate: {
    type: 'avg',
    on: "value->>'protein'"
  },
  group_by: 'day'
}
```

### Multi-Level Grouping with Filtering
```javascript
// Count records grouped by protein level, filtered by date
{
  key: 'nutrition',
  filter: {
    after: '2024-01-01'
  },
  aggregate: 'count',
  group_by: "value->>'protein'",
  order: {
    by: 'value',
    dir: 'DESC'
  }
}
```

### Complex Aggregation with Multiple Filters
```javascript
// Sum protein for high-carb days, grouped by subscriber
{
  key: 'nutrition',
  filter: {
    on: "value->>'carbs'",
    gt: 50
  },
  aggregate: {
    type: 'sum',
    on: "value->>'protein'"
  },
  group_by: 'subscriber_id',
  aggregate_filter: {
    gt: 100
  }
}
```

## JSON Path Pattern

Valid JSON paths follow PostgreSQL syntax:
- Pattern: `value->>'field_name'`
- Examples:
  - `value->>'protein'`
  - `value->>'carbs'`
  - `value->>'category'`
  - `value->>'subcategory'`

## Response Format

### Basic Response
```json
{
  "success": true,
  "results": [
    {
      "key": "2024-01-01",
      "value": 25.5
    }
  ]
}
```

### With Member Information
```json
{
  "success": true,
  "results": [
    {
      "key": "123",
      "value": 25.5,
      "member": {
        "id": 123,
        "name": "John Doe",
        "email": "john@example.com"
      }
    }
  ]
}
```

### With Additional Fields
```json
{
  "success": true,
  "results": [
    {
      "key": "2024-01-01",
      "value": 25.5,
      "id": "tracked_123",
      "created_at": "2024-01-01T12:00:00Z"
    }
  ]
}
```

## Error Handling

Invalid parameters return error responses:
```json
{
  "success": false,
  "message": "Invalid parameter: aggregate"
}
```

Common validation errors:
- Invalid JSON path syntax
- Unsupported aggregation type
- Invalid filter operators
- Missing required parameters
